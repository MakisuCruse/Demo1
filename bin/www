#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Chat:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
server.listen(port);
var io=require('socket.io')(server);
var count=0;
//在线用户的socket.id
var onLineList=new Set();
io.on('connection',function (socket) {
    console.log('a user connected..'+':'+socket.id);
    console.log(++count);
    onLineList.add(socket.id);
    arr=Array.from(onLineList);
    //
    exports.arr=arr;
    console.log(arr);
    socket.emit('onLine',arr);
    socket.on('public message',function (msg) {
      console.log(msg);
      io.emit('public message',socket.id+"~~~~"+msg);
    });
    socket.on('private message',function (id,msg) {
        console.log(msg+' to '+id);
        // io.to(socket.id).emit('private message','private message-'+socket.id+':'+msg);
        // var ids=[socket.id,id];
        io.to(id).emit('private message',msg);
    });
    socket.on('disconnect',function(){
        console.log('a user disconnected..');
        // onLineList.remove(socket.id);
        onLineList.delete(socket.id);
        arr=Array.from(onLineList);
        // remove(onLineList,socket.id);
        socket.emit('onLine',arr);
        console.log(onLineList);
        console.log(--count);
    });
});



/**
 * Listen on provided port, on all network interfaces.
 */


server.on('error', onError);
server.on('listening', onListening);

module.exports=io;



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
